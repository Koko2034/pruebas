import { RunResult } from 'stryker-api/test_runner';
import { TestFramework } from 'stryker-api/test_framework';
import { Config } from 'stryker-api/config';
import { File } from 'stryker-api/core';
import Timer from '../utils/Timer';
import { StatementMapDictionary } from '../transpiler/CoverageInstrumenterTranspiler';
export interface InitialTestRunResult {
    runResult: RunResult;
    transpiledFiles: File[];
    statementMaps: StatementMapDictionary;
}
export default class InitialTestExecutor {
    private options;
    private files;
    private testFramework;
    private timer;
    private readonly log;
    constructor(options: Config, files: File[], testFramework: TestFramework | null, timer: Timer);
    run(): Promise<InitialTestRunResult>;
    private initialRunInSandbox();
    private validateResult(runResult);
    private createDryRunResult();
    /**
     * Creates a facade for the transpile pipeline.
     * Also includes the coverage instrumenter transpiler,
     * which is used to instrument for code coverage when needed.
     */
    private createTranspilerFacade(coverageInstrumenterTranspiler);
    private createCoverageInstrumenterTranspiler();
    private logTranspileResult(transpileResult);
    private filterOutFailedTests(runResult);
    private logInitialTestRunSucceeded(tests);
    private logFailedTestsInInitialRun(failedTests);
    private logErrorsInInitialRun(runResult);
    private logTimeoutInitialRun(runResult);
}
