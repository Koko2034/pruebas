"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var messageProtocol_1 = require("./messageProtocol");
var objectUtils_1 = require("../utils/objectUtils");
var Task_1 = require("../utils/Task");
var ChildProcessProxy = /** @class */ (function () {
    function ChildProcessProxy(requirePath, logLevel, plugins, constructorFunction, constructorParams) {
        this.constructorFunction = constructorFunction;
        this.proxy = {};
        this.workerTasks = [];
        this.worker = child_process_1.fork(require.resolve('./ChildProcessProxyWorker'), [messageProtocol_1.autoStart], { silent: false, execArgv: [] });
        this.initTask = new Task_1.default();
        this.send({
            kind: messageProtocol_1.WorkerMessageKind.Init,
            logLevel: logLevel,
            plugins: plugins,
            requirePath: requirePath,
            constructorArgs: constructorParams
        });
        this.listenToWorkerMessages();
        this.initProxy();
    }
    /**
    * Creates a proxy where each function of the object created using the constructorFunction arg is ran inside of a child process
    */
    ChildProcessProxy.create = function (requirePath, logLevel, plugins, constructorFunction) {
        var constructorArgs = [];
        for (var _i = 4; _i < arguments.length; _i++) {
            constructorArgs[_i - 4] = arguments[_i];
        }
        return new ChildProcessProxy(requirePath, logLevel, plugins, constructorFunction, constructorArgs);
    };
    ChildProcessProxy.prototype.send = function (message) {
        this.worker.send(objectUtils_1.serialize(message));
    };
    ChildProcessProxy.prototype.initProxy = function () {
        var _this = this;
        Object.keys(this.constructorFunction.prototype).forEach(function (methodName) {
            _this.proxyMethod(methodName);
        });
    };
    ChildProcessProxy.prototype.proxyMethod = function (methodName) {
        var _this = this;
        this.proxy[methodName] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var workerTask = new Task_1.default();
            _this.initTask.promise.then(function () {
                var correlationId = _this.workerTasks.push(workerTask) - 1;
                _this.send({
                    kind: messageProtocol_1.WorkerMessageKind.Work,
                    correlationId: correlationId,
                    methodName: methodName,
                    args: args
                });
            });
            return workerTask.promise;
        };
    };
    ChildProcessProxy.prototype.listenToWorkerMessages = function () {
        var _this = this;
        this.worker.on('message', function (serializedMessage) {
            var message = objectUtils_1.deserialize(serializedMessage);
            if (message === 'init_done') {
                _this.initTask.resolve(undefined);
            }
            else {
                _this.workerTasks[message.correlationId].resolve(message.result);
            }
        });
    };
    ChildProcessProxy.prototype.dispose = function () {
        this.worker.kill();
    };
    return ChildProcessProxy;
}());
exports.default = ChildProcessProxy;
//# sourceMappingURL=ChildProcessProxy.js.map