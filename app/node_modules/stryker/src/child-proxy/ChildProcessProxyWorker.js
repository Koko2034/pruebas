"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var objectUtils_1 = require("../utils/objectUtils");
var messageProtocol_1 = require("./messageProtocol");
var log4js_1 = require("log4js");
var PluginLoader_1 = require("../PluginLoader");
var ChildProcessProxyWorker = /** @class */ (function () {
    function ChildProcessProxyWorker() {
        this.listenToParent();
    }
    ChildProcessProxyWorker.prototype.send = function (value) {
        if (process.send) {
            process.send(objectUtils_1.serialize(value));
        }
    };
    ChildProcessProxyWorker.prototype.listenToParent = function () {
        var _this = this;
        process.on('message', function (serializedMessage) {
            var message = objectUtils_1.deserialize(serializedMessage);
            switch (message.kind) {
                case messageProtocol_1.WorkerMessageKind.Init:
                    log4js_1.setGlobalLogLevel(message.logLevel);
                    new PluginLoader_1.default(message.plugins).load();
                    var RealSubjectClass = require(message.requirePath).default;
                    _this.realSubject = new (RealSubjectClass.bind.apply(RealSubjectClass, [void 0].concat(message.constructorArgs)))();
                    _this.send('init_done');
                    break;
                case messageProtocol_1.WorkerMessageKind.Work:
                    var result = (_a = _this.realSubject)[message.methodName].apply(_a, message.args);
                    Promise.resolve(result).then(function (result) {
                        _this.send({
                            correlationId: message.correlationId,
                            result: result
                        });
                    });
            }
            var _a;
        });
    };
    return ChildProcessProxyWorker;
}());
exports.default = ChildProcessProxyWorker;
// Prevent side effects for merely requiring the file
// Only actually start the child worker when it is requested
if (process.argv.indexOf(messageProtocol_1.autoStart) !== -1) {
    new ChildProcessProxyWorker();
}
//# sourceMappingURL=ChildProcessProxyWorker.js.map