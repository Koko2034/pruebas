"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log4js_1 = require("log4js");
var _ = require("lodash");
var TestableMutant_1 = require("./TestableMutant");
var objectUtils_1 = require("./utils/objectUtils");
var SourceFile_1 = require("./SourceFile");
var MutantTestMatcher = /** @class */ (function () {
    function MutantTestMatcher(mutants, files, initialRunResult, statementMaps, options, reporter) {
        this.mutants = mutants;
        this.files = files;
        this.initialRunResult = initialRunResult;
        this.statementMaps = statementMaps;
        this.options = options;
        this.reporter = reporter;
        this.log = log4js_1.getLogger(MutantTestMatcher.name);
    }
    Object.defineProperty(MutantTestMatcher.prototype, "baseline", {
        get: function () {
            if (this.isCoveragePerTestResult(this.initialRunResult.coverage)) {
                return this.initialRunResult.coverage.baseline;
            }
            else {
                return null;
            }
        },
        enumerable: true,
        configurable: true
    });
    MutantTestMatcher.prototype.matchWithMutants = function () {
        var _this = this;
        var testableMutants = this.createTestableMutants();
        if (this.options.coverageAnalysis === 'off') {
            testableMutants.forEach(function (mutant) { return mutant.addAllTestResults(_this.initialRunResult); });
        }
        else if (!this.initialRunResult.coverage) {
            this.log.warn('No coverage result found, even though coverageAnalysis is "%s". Assuming that all tests cover each mutant. This might have a big impact on the performance.', this.options.coverageAnalysis);
            testableMutants.forEach(function (mutant) { return mutant.addAllTestResults(_this.initialRunResult); });
        }
        else {
            testableMutants.forEach(function (testableMutant) { return _this.enrichWithCoveredTests(testableMutant); });
        }
        this.reporter.onAllMutantsMatchedWithTests(Object.freeze(testableMutants.map(this.mapMutantOnMatchedMutant)));
        return testableMutants;
    };
    MutantTestMatcher.prototype.enrichWithCoveredTests = function (testableMutant) {
        var _this = this;
        var statementMap = this.statementMaps[testableMutant.mutant.fileName];
        var smallestStatement = this.findSmallestCoveringStatement(testableMutant, statementMap);
        if (smallestStatement) {
            if (this.isCoveredByBaseline(testableMutant.mutant.fileName, smallestStatement)) {
                testableMutant.addAllTestResults(this.initialRunResult);
            }
            else {
                this.initialRunResult.tests.forEach(function (testResult, id) {
                    if (_this.isCoveredByTest(id, testableMutant.mutant.fileName, smallestStatement)) {
                        testableMutant.addTestResult(id, testResult);
                    }
                });
            }
        }
        else {
            this.log.warn('Cannot find statement for mutant %s in statement map for file. Assuming that all tests cover this mutant. This might have a big impact on the performance.', testableMutant.toString());
            testableMutant.addAllTestResults(this.initialRunResult);
        }
    };
    MutantTestMatcher.prototype.isCoveredByBaseline = function (filename, statementId) {
        if (this.baseline) {
            var coverageCollection = this.baseline[filename];
            return coverageCollection && coverageCollection.s[statementId] > 0;
        }
        else {
            return false;
        }
    };
    MutantTestMatcher.prototype.isCoveredByTest = function (testId, filename, statementId) {
        var coverageCollection = this.findCoverageCollectionForTest(testId);
        var coveredFile = coverageCollection && coverageCollection[filename];
        return coveredFile && coveredFile.s[statementId] > 0;
    };
    MutantTestMatcher.prototype.createTestableMutants = function () {
        var _this = this;
        var sourceFiles = this.files.filter(function (file) { return file.mutated; }).map(function (file) { return new SourceFile_1.default(file); });
        return objectUtils_1.filterEmpty(this.mutants.map(function (mutant) {
            var sourceFile = sourceFiles.find(function (file) { return file.name === mutant.fileName; });
            if (sourceFile) {
                return new TestableMutant_1.default(mutant, sourceFile);
            }
            else {
                _this.log.error("Mutant \"" + mutant.mutatorName + mutant.replacement + "\" is corrupt, because cannot find a text file with name " + mutant.fileName + ". List of source files: \n\t" + sourceFiles.map(function (s) { return s.name; }).join('\n\t'));
                return null;
            }
        }));
    };
    /**
     * Map the Mutant object on the MatchMutant Object.
     * @param testableMutant The mutant.
     * @returns The MatchedMutant
     */
    MutantTestMatcher.prototype.mapMutantOnMatchedMutant = function (testableMutant) {
        var matchedMutant = _.cloneDeep({
            mutatorName: testableMutant.mutant.mutatorName,
            scopedTestIds: testableMutant.selectedTests.map(function (testSelection) { return testSelection.id; }),
            timeSpentScopedTests: testableMutant.timeSpentScopedTests,
            fileName: testableMutant.mutant.fileName,
            replacement: testableMutant.mutant.replacement
        });
        return Object.freeze(matchedMutant);
    };
    /**
     * Finds the smallest statement that covers a mutant.
     * @param mutant The mutant.
     * @param statementMap of the covering file.
     * @returns The index of the coveredFile which contains the smallest statement surrounding the mutant.
     */
    MutantTestMatcher.prototype.findSmallestCoveringStatement = function (mutant, statementMap) {
        var _this = this;
        var smallestStatement = null;
        if (statementMap) {
            Object.keys(statementMap).forEach(function (statementId) {
                var location = statementMap[statementId];
                if (_this.statementCoversMutant(mutant.location, location) && (!smallestStatement || _this.isNewSmallestStatement(statementMap[smallestStatement], location))) {
                    smallestStatement = statementId;
                }
            });
        }
        return smallestStatement;
    };
    /**
     * Indicates whether a statement is the smallest statement of the two statements provided.
     * @param originalLocation The area which may cover a bigger area than the newLocation.
     * @param newLocation The area which may cover a smaller area than the originalLocation.
     * @returns true if the newLocation covers a smaller area than the originalLocation, making it the smaller statement.
     */
    MutantTestMatcher.prototype.isNewSmallestStatement = function (originalLocation, newLocation) {
        var statementIsSmallestStatement = false;
        if (!originalLocation) {
            statementIsSmallestStatement = true;
        }
        else {
            var lineDifference = (originalLocation.end.line - originalLocation.start.line) - (newLocation.end.line - newLocation.start.line);
            var coversLessLines = lineDifference > 0;
            var coversLessColumns = lineDifference === 0 && (newLocation.start.column - originalLocation.start.column) + (originalLocation.end.column - newLocation.end.column) > 0;
            if (coversLessLines || coversLessColumns) {
                statementIsSmallestStatement = true;
            }
        }
        return statementIsSmallestStatement;
    };
    /**
     * Indicates whether a statement covers a mutant.
     * @param mutantLocation The location of the mutant.
     * @param statementLocation The location of the statement.
     * @returns true if the statment covers the mutant.
     */
    MutantTestMatcher.prototype.statementCoversMutant = function (mutantLocation, statementLocation) {
        var mutantIsAfterStart = mutantLocation.start.line > statementLocation.start.line ||
            (mutantLocation.start.line === statementLocation.start.line && mutantLocation.start.column >= statementLocation.start.column);
        var mutantIsBeforeEnd = mutantLocation.end.line < statementLocation.end.line ||
            (mutantLocation.end.line === statementLocation.end.line && mutantLocation.end.column <= statementLocation.end.column);
        return mutantIsAfterStart && mutantIsBeforeEnd;
    };
    MutantTestMatcher.prototype.findCoverageCollectionForTest = function (testId) {
        if (this.initialRunResult.coverage) {
            if (this.isCoveragePerTestResult(this.initialRunResult.coverage)) {
                return this.initialRunResult.coverage.deviations[testId];
            }
            else {
                return this.initialRunResult.coverage;
            }
        }
        else {
            return null;
        }
    };
    MutantTestMatcher.prototype.isCoveragePerTestResult = function (coverage) {
        return this.options.coverageAnalysis === 'perTest';
    };
    return MutantTestMatcher;
}());
exports.default = MutantTestMatcher;
//# sourceMappingURL=MutantTestMatcher.js.map