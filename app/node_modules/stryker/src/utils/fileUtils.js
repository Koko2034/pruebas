"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fs = require("mz/fs");
var path = require("path");
var nodeGlob = require("glob");
var mkdirp = require("mkdirp");
var rimraf = require("rimraf");
var core_1 = require("stryker-api/core");
function glob(expression) {
    return new Promise(function (resolve, reject) {
        nodeGlob(expression, { nodir: true }, function (error, matches) { error ? reject(error) : resolve(matches); });
    });
}
exports.glob = glob;
function deleteDir(dirToDelete) {
    return new Promise(function (resolve, reject) {
        rimraf(dirToDelete, function (error) { error ? reject(error) : resolve(); });
    });
}
exports.deleteDir = deleteDir;
function cleanFolder(folderName) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var e_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 4]);
                    return [4 /*yield*/, fs.lstat(folderName)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, deleteDir(folderName)];
                case 2:
                    _a.sent();
                    return [2 /*return*/, mkdirp.sync(folderName)];
                case 3:
                    e_1 = _a.sent();
                    return [2 /*return*/, mkdirp.sync(folderName)];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.cleanFolder = cleanFolder;
/**
 * Wrapper around the 'require' function (for testability)
 */
function importModule(moduleName) {
    require(moduleName);
}
exports.importModule = importModule;
function isOnlineFile(path) {
    return path.indexOf('http://') === 0 || path.indexOf('https://') === 0;
}
exports.isOnlineFile = isOnlineFile;
var binaryExtensions = [
    '.png',
    '.jpeg',
    '.gif' // Still more to add
];
function isBinaryFile(name) {
    return binaryExtensions.indexOf(path.extname(name)) > -1;
}
/**
 * Writes data to a specified file.
 * @param fileName The path to the file.
 * @param data The content of the file.
 * @returns A promise to eventually save the file.
 */
function writeFile(fileName, data) {
    if (Buffer.isBuffer(data)) {
        return fs.writeFile(fileName, data);
    }
    else {
        return fs.writeFile(fileName, data, 'utf8');
    }
}
exports.writeFile = writeFile;
function determineFileKind(fileName) {
    if (isOnlineFile(fileName)) {
        return core_1.FileKind.Web;
    }
    if (isBinaryFile(fileName)) {
        return core_1.FileKind.Binary;
    }
    else {
        return core_1.FileKind.Text;
    }
}
exports.determineFileKind = determineFileKind;
//# sourceMappingURL=fileUtils.js.map