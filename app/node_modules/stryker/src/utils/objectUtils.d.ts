/// <reference types="node" />
export declare function freezeRecursively<T extends {
    [prop: string]: any;
}>(target: T): T;
export declare function isPromise(input: any): input is Promise<any>;
export declare function filterEmpty<T>(input: (T | null | void)[]): T[];
/**
 * Serializes javascript without using `JSON.stringify` (directly), as it does not allow for regexes or functions, etc
 */
export declare const serialize: (obj: any) => string;
/**
 * Deserialize javascript without using `JSON.parse` (directly), as it does not allow for regexes or functions, etc
 * (Uses eval instead)
 */
export declare function deserialize(serializedJavascript: String): any;
export declare function isErrnoException(error: Error): error is NodeJS.ErrnoException;
export declare function errorToString(error: any): any;
export declare function copy<T>(obj: T, deep?: boolean): T;
export declare function wrapInClosure(codeFragment: string): string;
/**
 * A wrapper around `process.exitCode = n` (for testability)
 */
export declare function setExitCode(n: number): void;
