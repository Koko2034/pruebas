"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log4js = require("log4js");
var path = require("path");
var utils_1 = require("./utils");
var karmaConfigReaderLocation = 'karma/lib/config';
var KarmaConfigReader = /** @class */ (function () {
    function KarmaConfigReader(karmaConfigFile) {
        this.karmaConfigFile = karmaConfigFile;
        if (this.karmaConfigFile) {
            this.karmaConfigFile = path.resolve(this.karmaConfigFile);
        }
        this.log = log4js.getLogger('KarmaConfigReader');
    }
    KarmaConfigReader.prototype.read = function () {
        if (this.karmaConfigFile && typeof this.karmaConfigFile === 'string') {
            this.log.info('Importing config from "%s"', this.karmaConfigFile);
            try {
                this.validateConfig();
                return this.readConfig();
            }
            catch (error) {
                this.log.error("Could not read karma configuration from " + this.karmaConfigFile + ".", error);
            }
        }
        return null;
    };
    KarmaConfigReader.prototype.validateConfig = function () {
        // Delegate validation of configuration to karma config lib, as it has nice and recognizable error handling
        this.parseNativeKarmaConfig();
    };
    KarmaConfigReader.prototype.readConfig = function () {
        // We cannot delegate config reading to karma's config reader, because we cannot serialize the result to child processes
        // It results in: TypeError: Serializing native function: bound configure
        var configModule = utils_1.requireModule(this.karmaConfigFile);
        var config = new Config();
        configModule(config);
        // Use native functionality of parsing the files, so we ensure that those are correctly resolved
        var karmaOptions = this.parseNativeKarmaConfig();
        if (karmaOptions && karmaOptions.files) {
            config['files'] = karmaOptions.files;
            config['exclude'] = karmaOptions.exclude;
        }
        return config;
    };
    KarmaConfigReader.prototype.parseNativeKarmaConfig = function () {
        var cfg;
        try {
            cfg = require(karmaConfigReaderLocation);
        }
        catch (e) {
            this.log.warn("Could not find karma config reader at \"%s\"", karmaConfigReaderLocation);
        }
        if (cfg) {
            return cfg.parseConfig(this.karmaConfigFile, {});
        }
        else {
            return null;
        }
    };
    return KarmaConfigReader;
}());
exports.default = KarmaConfigReader;
var Config = /** @class */ (function () {
    function Config() {
        this.autoWatch = false;
        this.LOG_DISABLE = 'OFF';
        this.LOG_ERROR = 'ERROR';
        this.LOG_WARN = 'WARN';
        this.LOG_INFO = 'INFO';
        this.LOG_DEBUG = 'DEBUG';
    }
    Config.prototype.set = function (obj) {
        for (var i in obj) {
            this[i] = obj[i];
        }
    };
    return Config;
}());
//# sourceMappingURL=KarmaConfigReader.js.map