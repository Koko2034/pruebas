"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log4js = require("log4js");
var KarmaConfigReader_1 = require("./KarmaConfigReader");
var log = log4js.getLogger('KarmaConfigEditor');
var KarmaConfigEditor = /** @class */ (function () {
    function KarmaConfigEditor() {
    }
    KarmaConfigEditor.prototype.edit = function (strykerConfig) {
        var karmaConfig = new KarmaConfigReader_1.default(strykerConfig['karmaConfigFile']).read();
        if (karmaConfig) {
            KarmaConfigEditor.importFiles(strykerConfig, karmaConfig);
            KarmaConfigEditor.importDefaultKarmaConfig(strykerConfig, karmaConfig);
        }
    };
    KarmaConfigEditor.importFiles = function (strykerConfig, karmaConfig) {
        if (!strykerConfig.files) {
            strykerConfig.files = [];
        }
        if (!karmaConfig.files) {
            karmaConfig.files = [];
        }
        if (!karmaConfig.exclude) {
            karmaConfig.exclude = [];
        }
        var files = karmaConfig.files;
        var exclude = karmaConfig.exclude;
        if (files && Array.isArray(files)) {
            var karmaFiles = files.map(KarmaConfigEditor.toInputFileDescriptor);
            log.debug("Importing following files from karma.conf file to stryker: " + JSON.stringify(karmaFiles));
            strykerConfig.files = strykerConfig.files.concat(karmaFiles);
        }
        if (exclude && Array.isArray(exclude)) {
            var ignores = exclude.map(function (fileToIgnore) { return "!" + fileToIgnore; });
            log.debug("Importing following \"exclude\" files from karma configuration: " + JSON.stringify(ignores));
            strykerConfig.files = strykerConfig.files.concat(ignores);
        }
    };
    KarmaConfigEditor.importDefaultKarmaConfig = function (strykerConfig, karmaConfig) {
        if (strykerConfig['karmaConfig']) {
            var target = strykerConfig['karmaConfig'];
            for (var i in karmaConfig) {
                if (!target[i]) {
                    target[i] = karmaConfig[i];
                }
            }
        }
        else {
            strykerConfig['karmaConfig'] = karmaConfig;
        }
    };
    KarmaConfigEditor.toInputFileDescriptor = function (karmaPattern) {
        if (typeof karmaPattern === 'string') {
            return {
                pattern: karmaPattern,
                included: true,
                mutated: false
            };
        }
        else {
            return {
                pattern: karmaPattern.pattern,
                included: karmaPattern.included || false,
                mutated: karmaPattern['mutated'] || false
            };
        }
    };
    return KarmaConfigEditor;
}());
exports.default = KarmaConfigEditor;
//# sourceMappingURL=KarmaConfigEditor.js.map